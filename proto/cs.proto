/*
	svr 和 dbproxy_svr 基础协议定义
*/

syntax                        = "proto3";
package db; 

import "google/protobuf/descriptor.proto";

////////////////////custom option define start///////////////
enum KeyType {
    K_NONE     = 0;
    K_MAIN_KEY = 1; //主键
    K_INDEX    = 2;	//查询建
}

extend google.protobuf.MessageOptions 
{
    string OptMsg = 50001;
}

extend google.protobuf.FieldOptions {
    KeyType OptKey = 50001;//由些例子用51234，还未查明原因，以后有问题再研究protobuf手册 ;
    string OptStr  = 50002;
    int32 OptInt   = 50003;
}
////////////////////custom option define end///////////////

//测试例子
message TestMsg
{
	option (OptMsg)="my_msg_opt";

	string	msg_name  = 1;	//proto message name
	string	cond      = 3;	//条件查询字符串, SQL where 后面的字符串， 例如"id=2". 
	uint32	limit_num = 4;	//限制查询数量 sql 的"limit num".
	
	//选用
	string id = 3334 [(OptKey)=K_MAIN_KEY];
	string s2 = 333 [(OptStr)="abc"];
	string s3 = 3333 [(OptInt)=333];
}



//消息号，请求和响应一样。
enum Cmd
{
	CMD_NONE          =0;
	CMD_INIT_TABLE    =1; //ReqInitTable  初始化所有表结构，如果db没表，就创建表。有就校验结构。
	CMD_INSERT        =2; //ReqInsertData
	CMD_UPDATE        =3; //ReqUpdateData
	CMD_GET           =4; //ReqGetData
	CMD_DEL           =5; //ReqDelData
	CMD_SQL           =6; //ReqSql  只合适mysql用，执行sql语句
}

message ReqInitTable
{
	repeated string msg_name = 1; //就是protobuf message 名
}
message RspInitTable
{
	bool is_ok = 1;
}

message ReqInsertData
{
	string		msg_name  = 1;
	bytes		data      = 2;	//proto serialize data 
}
message RspInsertData
{
	string		msg_name  = 1;
	bool		is_ok     = 3;
	uint64		num_key	= 4;	//数据的主键，如果 主键是数字 才有用
	string		str_key	= 5;    //数据的主键，如果 主键是字符串 才有用
}

message ReqUpdateData
{
	string		msg_name  = 1;
	bytes		data      = 2;	//proto serialize data 
}
message RspUpdateData
{
	string		msg_name  = 1;
	bool		is_ok     = 2;
	uint64		num_key	= 4;	//数据的主键，如果 主键是数字 才有用
	string		str_key	= 5;    //数据的主键，如果 主键是字符串 才有用
}

message ReqGetData
{
	string		msg_name  = 1;	//proto message name
	string		cond      = 3;	//条件查询字符串, SQL where 后面的字符串， 例如"id=2". 
	uint32		limit_num = 4;	//限制查询数量 sql 的"limit num". 缺省值0表示不限制。
}
message RspGetData
{
	string		msg_name  = 1;	//对应的proto消息体必须有id字段作为key
	repeated bytes	data  = 2;	//proto serialize data
	bool		is_last   = 3;	//true表示获得最后一条数据		
}

message ReqDelData
{
	string		msg_name  = 1;	
	uint64		num_key	  = 4;	 //数据的主键, 可选用
	string		str_key	  = 5;   //数据的主键, 可选用
}
message RspDelData
{
	string		msg_name  = 1;
	uint32		del_num   = 2;  //删除多少项数据, 0表示失败
	uint64		num_key	  = 4;	//数据的主键，和请求一样
	string		str_key	  = 5;  //数据的主键，和请求一样
}

message ReqSql
{
	string exe_str  = 1;
}
message RspSql
{
	bool is_ok = 1;
}

